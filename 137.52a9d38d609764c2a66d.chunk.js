(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{426:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/copy-webpack-plugin"><img src="https://img.shields.io/npm/v/copy-webpack-plugin.svg" alt="npm"></a>\n<a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/copy-webpack-plugin.svg" alt="node"></a>\n<a href="https://david-dm.org/webpack-contrib/copy-webpack-plugin"><img src="https://david-dm.org/webpack-contrib/copy-webpack-plugin.svg" alt="deps"></a>\n<a href="https://dev.azure.com/webpack-contrib/copy-webpack-plugin/_build/latest?definitionId=5&#x26;branchName=master"><img src="https://dev.azure.com/webpack-contrib/copy-webpack-plugin/_apis/build/status/webpack-contrib.copy-webpack-plugin?branchName=master" alt="tests"></a>\n<a href="https://codecov.io/gh/webpack-contrib/copy-webpack-plugin"><img src="https://codecov.io/gh/webpack-contrib/copy-webpack-plugin/branch/master/graph/badge.svg" alt="cover"></a>\n<a href="https://gitter.im/webpack/webpack"><img src="https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg" alt="chat"></a>\n<a href="https://packagephobia.now.sh/result?p=copy-webpack-plugin"><img src="https://packagephobia.now.sh/badge?p=copy-webpack-plugin" alt="size"></a></p>\n<p>Copies individual files or entire directories, which already exist, to the build directory.</p>\n<h2 id="getting-started">Getting Started<a href="#getting-started" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>To begin, you\'ll need to install <code>copy-webpack-plugin</code>:</p>\n<pre><code class="hljs language-console">$ npm install copy-webpack-plugin --save-dev\n</code></pre>\n<p>Then add the plugin to your <code>webpack</code> config. For example:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'copy-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'source\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'dest\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'other\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'public\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote>\n<p>ℹ️ <code>webpack-copy-plugin</code> is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.</p>\n<p>ℹ️ If you want <code>webpack-dev-server</code> to write files to the output directory during development, you can force it with the <a href="https://github.com/webpack/webpack-dev-middleware#writetodisk"><code>writeToDisk</code></a> option or the <a href="https://github.com/gajus/write-file-webpack-plugin"><code>write-file-webpack-plugin</code></a>.</p>\n</blockquote>\n<h2 id="options">Options<a href="#options" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>The plugin\'s signature:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span>patterns<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="patterns">Patterns<a href="#patterns" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#from"><code>from</code></a><p class="description mobile"><code>{String\\|Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String\\|Object}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Glob or path from where we сopy files.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#to"><code>to</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Output path.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#context"><code>context</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>options.context \\|\\| compiler.options.context</code></td>\n<td align="left">A path that determines how to interpret the \n<code>from</code>\n path.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#totype"><code>toType</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Determinate what is \n<code>to</code>\n option - directory, file or template.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#test"><code>test</code></a><p class="description mobile"><code>{RegExp}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{RegExp}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Pattern for extracting elements to be used in \n<code>to</code>\n templates.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#force"><code>force</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Overwrites files already in \n<code>compilation.assets</code>\n (usually added by other plugins/loaders).</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#ignore"><code>ignore</code></a><p class="description mobile"><code>{Array}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Array}</code></td>\n<td align="center"><code>[]</code></td>\n<td align="left">Globs to ignore files.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#flatten"><code>flatten</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Removes all directory references and only copies file names.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#cache"><code>cache</code></a><p class="description mobile"><code>{Boolean\\|Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean\\|Object}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Enable \n<code>transform</code>\n caching. You can use \n<code>{ cache: { key: \'my-cache-key\' } }</code>\n to invalidate the cache.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#transform"><code>transform</code></a><p class="description mobile"><code>{Function\\|Promise}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Function\\|Promise}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to modify the file contents.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#transformpath"><code>transformPath</code></a><p class="description mobile"><code>{Function\\|Promise}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Function\\|Promise}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to modify the writing path.</td>\n</tr>\n</tbody>\n</table>\n<h4 id="from"><code>from</code><a href="#from" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String\\|Object</code>\nDefault: <code>undefined</code></p>\n<p>Glob or path from where we сopy files.\nGlobs accept <a href="https://github.com/isaacs/minimatch">minimatch options</a>.</p>\n<p>You can define <code>from</code> as <code>Object</code> and use the <a href="https://github.com/isaacs/node-glob#options"><code>node-glob</code> options</a>.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>from</code> (i.e <code>path\\to\\file.ext</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token string">\'relative/path/to/file.ext\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'/absolute/path/to/file.ext\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'relative/path/to/dir\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'/absolute/path/to/dir\'</span><span class="token punctuation">,</span>\n      <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> glob<span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span> dot<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="to"><code>to</code><a href="#to" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Output path.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>to</code> (i.e <code>path\\to\\dest</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'relative/path/to/dest/\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'/absolute/path/to/dest/\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="context"><code>context</code><a href="#context" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String</code>\nDefault: <code>options.context|compiler.options.context</code></p>\n<p>A path that determines how to interpret the <code>from</code> path.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>context</code> (i.e <code>path\\to\\context</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.txt\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        context<span class="token punctuation">:</span> <span class="token string">\'app/\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="totype"><code>toType</code><a href="#totype" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Determinate what is <code>to</code> option - directory, file or template.\nSometimes it is hard to say what is <code>to</code>, example <code>path/to/dir-with.ext</code>.\nIf you want to copy files in directory you need use <code>dir</code> option.\nWe try to automatically determine the <code>type</code> so you most likely do not need this option.</p>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'dir\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>from</code>\n is directory, \n<code>to</code>\n has no extension or ends in \n<code>\'/\'</code></td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'file\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n has extension or \n<code>from</code>\n is file</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'template\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n contains \n<a href="https://github.com/webpack-contrib/file-loader#placeholders">a template pattern</a></td>\n</tr>\n</tbody>\n</table>\n<h5 id="dir"><code>\'dir\'</code><a href="#dir" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'path/to/file.txt\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'directory/with/extension.ext\'</span><span class="token punctuation">,</span>\n        toType<span class="token punctuation">:</span> <span class="token string">\'dir\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="file"><code>\'file\'</code><a href="#file" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'path/to/file.txt\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'file/without/extension\'</span><span class="token punctuation">,</span>\n        toType<span class="token punctuation">:</span> <span class="token string">\'file\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="template"><code>\'template\'</code><a href="#template" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/[name].[hash].[ext]\'</span><span class="token punctuation">,</span>\n        toType<span class="token punctuation">:</span> <span class="token string">\'template\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="test"><code>test</code><a href="#test" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>RegExp</code>\nDefault: <code>undefined</code></p>\n<p>Pattern for extracting elements to be used in <code>to</code> templates.</p>\n<p>Defines a <code>{RegExp}</code> to match some parts of the file path.\nThese capture groups can be reused in the name property using <code>[N]</code> placeholder.\nNote that <code>[0]</code> will be replaced by the entire path of the file,\nwhereas <code>[1]</code> will contain the first capturing parenthesis of your <code>{RegExp}</code>\nand so on...</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'*/*\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'[1]-[2].[hash].[ext]\'</span><span class="token punctuation">,</span>\n        test<span class="token punctuation">:</span> <span class="token regex">/([^/]+)\\/(.+)\\.png$/</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="force"><code>force</code><a href="#force" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Overwrites files already in <code>compilation.assets</code> (usually added by other plugins/loaders).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/**/*\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        force<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="ignore"><code>ignore</code><a href="#ignore" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Array</code>\nDefault: <code>[]</code></p>\n<p>Globs to ignore files.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/**/*\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'*.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="flatten"><code>flatten</code><a href="#flatten" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Removes all directory references and only copies file names.</p>\n<blockquote>\n<p>⚠️ If files have the same name, the result is non-deterministic.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/**/*\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        flatten<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="cache"><code>cache</code><a href="#cache" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Boolean|Object</code>\nDefault: <code>false</code></p>\n<p>Enable/disable <code>transform</code> caching. You can use <code>{ cache: { key: \'my-cache-key\' } }</code> to invalidate the cache.\nDefault path to cache directory: <code>node_modules/.cache/copy-webpack-plugin</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="transform"><code>transform</code><a href="#transform" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Function|Promise</code>\nDefault: <code>undefined</code></p>\n<p>Allows to modify the file contents.</p>\n<h5 id="function"><code>{Function}</code><a href="#function" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="promise"><code>{Promise}</code><a href="#promise" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="transformpath"><code>transformPath</code><a href="#transformpath" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Type: <code>Function|Promise</code>\nDefault: <code>undefined</code></p>\n<p>Allows to modify the writing path.</p>\n<blockquote>\n<p>⚠️ Don\'t return directly <code>\\\\</code> in <code>transformPath</code> (i.e <code>path\\to\\newFile</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<h5 id="function-1"><code>{Function}</code><a href="#function-1" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        <span class="token function">transformPath</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span> absolutePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token string">\'newPath\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5 id="promise-1"><code>{Promise}</code><a href="#promise-1" aria-hidden="true"><span class="icon icon-link"></span></a></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n        to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n        <span class="token function">transformPath</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span> absolutePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'newPath\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3 id="options-1">Options<a href="#options-1" aria-hidden="true"><span class="icon icon-link"></span></a></h3>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#loglevel"><code>logLevel</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><strong><code>\'warn\'</code></strong></td>\n<td align="left">Level of messages that the module will log</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#ignore"><code>ignore</code></a><p class="description mobile"><code>{Array}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Array}</code></td>\n<td align="center"><code>[]</code></td>\n<td align="left">Array of globs to ignore (applied to \n<code>from</code>\n)</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#context"><code>context</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>compiler.options.context</code></td>\n<td align="left">A path that determines how to interpret the \n<code>from</code>\n path, shared for all patterns</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#copyunmodified"><code>copyUnmodified</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Copies files, regardless of modification when using watch or \n<code>webpack-dev-server</code>\n. All files are copied on first build, regardless of this option</td>\n</tr>\n</tbody>\n</table>\n<h4 id="loglevel"><code>logLevel</code><a href="#loglevel" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>This property defines the level of messages that the module will log. Valid levels include:</p>\n<ul>\n<li><code>trace</code></li>\n<li><code>debug</code></li>\n<li><code>info</code></li>\n<li><code>warn</code> (default)</li>\n<li><code>error</code></li>\n<li><code>silent</code></li>\n</ul>\n<p>Setting a log level means that all other levels below it will be visible in the\nconsole. Setting <code>logLevel: \'silent\'</code> will hide all console output. The module\nleverages <a href="https://github.com/webpack-contrib/webpack-log#readme"><code>webpack-log</code></a>\nfor logging management, and more information can be found on its page.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>patterns<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> logLevel<span class="token punctuation">:</span> <span class="token string">\'debug\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="ignore-1"><code>ignore</code><a href="#ignore-1" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Array of globs to ignore (applied to <code>from</code>).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>patterns<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'*.js\'</span><span class="token punctuation">,</span> <span class="token string">\'*.css\'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="context-1"><code>context</code><a href="#context-1" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>A path that determines how to interpret the <code>from</code> path, shared for all patterns.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>patterns<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> context<span class="token punctuation">:</span> <span class="token string">\'/app\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4 id="copyunmodified"><code>copyUnmodified</code><a href="#copyunmodified" aria-hidden="true"><span class="icon icon-link"></span></a></h4>\n<p>Copies files, regardless of modification when using watch or <code>webpack-dev-server</code>. All files are copied on first build, regardless of this option.</p>\n<blockquote>\n<p>ℹ️ By default, we only copy <strong>modified</strong> files during a <code>webpack --watch</code> or <code>webpack-dev-server</code> build. Setting this option to <code>true</code> will copy all files.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>patterns<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> copyUnmodified<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2 id="contributing">Contributing<a href="#contributing" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p>\n<p><a href="https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p>\n<h2 id="license">License<a href="#license" aria-hidden="true"><span class="icon icon-link"></span></a></h2>\n<p><a href="https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/LICENSE">MIT</a></p>\n'}}]);